
TP2_Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007df  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f5  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000324  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer0Init>:

//CONFIGURACION DEL TIMER0
//Activación de interrupción periódica y
//Generación de señal periódica en terminal OC0A (PD6) 
void Timer0Init(void){
	DDRD |= (1<<PORTD6); //waveform generator output
  80:	56 9a       	sbi	0x0a, 6	; 10
	//configuración del TOPE del contador TCNT0 
	OCR0A=39;			//39+1
  82:	87 e2       	ldi	r24, 0x27	; 39
  84:	87 bd       	out	0x27, r24	; 39
	TCCR0A =(1<<COM0A0) | (1<<WGM01); //modo CTC, Toggle on compare match
  86:	82 e4       	ldi	r24, 0x42	; 66
  88:	84 bd       	out	0x24, r24	; 36
	TCCR0B =(1<<CS01);	//CTC CLK/8 =16MHz/8 =2MHz
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 =(1<<OCIE0A); // habilitamos interrpución COMPA
  8e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  92:	08 95       	ret

00000094 <__vector_14>:

//MANEJADOR DE INTERRUPCION DEL COMPARADOR A DEL TIMER0
//se activa periodicamente cuando TCNT0==OCR0A modo CTC
//ejecuta una tarea dummy para test

ISR(TIMER0_COMPA_vect){ //interrupción periódica de periodo Tisr=40/2MHz=20us  o fisr=2MHz/40=500kHz
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25

		PORTB ^=(1<<5); //toggle cada 100ms
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	89 27       	eor	r24, r25
  a8:	85 b9       	out	0x05, r24	; 5
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_1>:


//MANEJADOR DE INTERRUPCIÓN INT0
//ejecuta una tarea dummy para test
ISR(INT0_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	//tarea dummy
	PORTC ^=(1<<PORTC3);
  c6:	98 b1       	in	r25, 0x08	; 8
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	89 27       	eor	r24, r25
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_1+0x1a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x20>
  d8:	00 00       	nop
	//debouncing
	_delay_ms(10);
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <Int0Init>:

//INT0
//Configuración y activación
//de la interrupción externa INT0
void Int0Init(){
	DDRD &=~(1<<PORTD2);
  e8:	52 98       	cbi	0x0a, 2	; 10
	PORTD |=(1<<PORTD2); //Pullup PD2
  ea:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |=(1<<ISC01); //INT0 x flanco de bajada
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
	EIMSK |=(1<<INT0);  //Habilitar int INT0	
  f6:	e8 9a       	sbi	0x1d, 0	; 29
  f8:	08 95       	ret

000000fa <main>:
//PROGRAMA MAIN
//Inicializaciones y activación de interrupciones
//pone en ejecución una tarea dummy en el loop.
int main(void)
{
	DDRC |=(1<<DDC3);
  fa:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |=(1<<DDD1);
  fc:	51 9a       	sbi	0x0a, 1	; 10
	DDRB |=(1<<DDB5);	
  fe:	25 9a       	sbi	0x04, 5	; 4
	Int0Init();
 100:	0e 94 74 00 	call	0xe8	; 0xe8 <Int0Init>
	Timer0Init();
 104:	0e 94 40 00 	call	0x80	; 0x80 <Timer0Init>
	sei();
 108:	78 94       	sei

    while (1) 
    {
		//tarea dummy
		PORTD |=(1<<PORTD1);
 10a:	59 9a       	sbi	0x0b, 1	; 11
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	80 e7       	ldi	r24, 0x70	; 112
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x18>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x22>
 11c:	00 00       	nop
		_delay_ms(50);
		PORTD &=~(1<<PORTD1);
 11e:	59 98       	cbi	0x0b, 1	; 11
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x2c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x36>
 130:	00 00       	nop
 132:	eb cf       	rjmp	.-42     	; 0x10a <main+0x10>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
